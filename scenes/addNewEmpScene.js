const {Telegraf, Markup, Composer, Scenes} = require('telegraf');
const constants = require('../constants');
const bot = new Telegraf('5917878557:AAFZK9yI3Qju7-UfpyM1J-K5wyI626vLmQ4');
const db = require('../db/db')

const askFullName = new Composer()
askFullName.on(`callback_query`, async (ctx) => {
  db.all(constants.GET_EMPLOYEES_SQL, [], async (err, rows) => {
      if (err) console.log(err.message);
      let userStatus = rows.find(employee => employee.tg_id == ctx.callbackQuery.from.id).status || '–ê–Ω–æ–Ω–∏–º'
      if (userStatus != 'üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
          await ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. \n–í–∞—à —Å—Ç–∞—Ç—É—Å: ${userStatus}`, {show_alert: true})
          await ctx.scene.leave()
      } else {
          await ctx.answerCbQuery()
          ctx.session.data = {}
          await ctx.reply(`–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞`)
          await ctx.wizard.next()
      }
  })
})

const askStatus = new Composer()
askStatus.on(`message`, async (ctx) => {
    if (ctx.message.text.length <3 || ctx.message.text.match(/\P{sc=Cyrillic}/giu)) {
        await ctx.reply('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É.\n–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ —Ç—Ä—ë—Ö —Å–∏–º–≤–æ–ª–æ–≤.')
    } else {
        ctx.session.data.full_name = ctx.message.text
        await ctx.replyWithHTML(`
    –ò–º—è: ${ctx.session.data.full_name}
    
        <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</b>`, Markup.keyboard(['üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '‚úçÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü']).oneTime().resize())
    await ctx.wizard.next()
    }
})

const askPhone = new Composer() 
askPhone.on(`message`, async (ctx) => {
  ctx.session.data.status = ctx.message.text
  await ctx.replyWithHTML(`
–ò–º—è: ${ctx.session.data.full_name}
–°—Ç–∞—Ç—É—Å: ${ctx.session.data.status}
    
  <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\t89003332211</b>`)
  await ctx.wizard.next()
})

const askTgId = new Composer()
askTgId.on(`message`, async (ctx) => {
    if (ctx.message.text.match(/\D/gi) || ctx.message.text.length != 11) {
        await ctx.reply('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞.')
    } else {
        ctx.session.data.phone = ctx.message.text
        await bot.telegram.sendPhoto(ctx.chat.id, 'AgACAgIAAxkBAAIC22PyoxoWya6azsnT06ChwGWYvArpAAIQxDEbyGaYS8UgONCkrof0AQADAgADeQADLgQ', 
        {caption:`
–ò–º—è: ${ctx.session.data.full_name}
–°—Ç–∞—Ç—É—Å: ${ctx.session.data.status}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${ctx.session.data.phone}
        
    <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID <ins>–°–û–¢–†–£–î–ù–ò–ö–ê</ins>.\n
–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ–ª—É—á–∏–ª</b>`, parse_mode: 'HTML'})
        await ctx.wizard.next()
    }
})

const askPhoto = new Composer()
askPhoto.on(`text`, async (ctx) => {
    if (ctx.message.text.match(/\D/gi) || ctx.message.text.length <8) {
        await ctx.reply('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ Telegram id. (9-11 —Ü–∏—Ñ—Ä)')
    } else {
        ctx.session.data.tg_id = ctx.message.text 
        await ctx.replyWithHTML(`
    –ò–º—è: ${ctx.session.data.full_name}
    –°—Ç–∞—Ç—É—Å: ${ctx.session.data.status}
    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${ctx.session.data.phone}
    Telegram id: ${ctx.session.data.tg_id}
        
        <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>`)
        await ctx.wizard.next()
    }
})  

const askComment = new Composer()
askComment.on(`message`, async (ctx) => {
    if (ctx.message.photo) {
        ctx.session.data.photo = ctx.message.photo[ctx.message.photo.length-1].file_id
        await ctx.replyWithHTML(`
    –ò–º—è: ${ctx.session.data.full_name}
    –°—Ç–∞—Ç—É—Å: ${ctx.session.data.status}
    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${ctx.session.data.phone}
    Telegram id: ${ctx.session.data.tg_id}
    –§–æ—Ç–æ: –µ—Å—Ç—å‚úÖ
        
        <b>–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
        –ù–∞–ø—Ä–∏–º–µ—Ä:</b> <i>–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É 10.02.2023</i>
        `)
        await ctx.wizard.next()
    } else {
        await ctx.reply('–§–æ—Ç–æ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    }
})  

const decision = new Composer()
decision.on('message', async (ctx)=> {
    ctx.session.data.comment = ctx.message.text
    await bot.telegram.sendPhoto(ctx.chat.id, `${ctx.session.data.photo}`,
    {caption:`
–ò–º—è: ${ctx.session.data.full_name}
–°—Ç–∞—Ç—É—Å: ${ctx.session.data.status}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${ctx.session.data.phone}
Telegram id: ${ctx.session.data.tg_id}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${ctx.session.data.comment}
`, reply_markup:{
    inline_keyboard:[
        [{text:"–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data:"addEmpToDB"}],
        [{text:"–û—Ç–º–µ–Ω–∏—Ç—å", callback_data:`cancelEmpAdding`}]
    ]}, parse_mode: 'HTML'})
    await ctx.wizard.next()
})

const final = new Composer()
final.on('callback_query', async (ctx)=> {
    await ctx.answerCbQuery()
    if (ctx.update.callback_query.data == 'addEmpToDB') {
        let wizardData = [
            ctx.session.data.full_name, 
            ctx.session.data.status, 
            ctx.session.data.photo,
            ctx.session.data.phone, 
            ctx.session.data.tg_id, 
            ctx.session.data.comment
        ];
        console.log(wizardData);
        let sql = `INSERT INTO employees(full_name, status, photo, phone, tg_id, comment) VALUES (?,?,?,?,?,?)` 
        db.run(sql, wizardData, async (err) => {
          if (err) await ctx.reply(err.message)
          await ctx.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        })
        await ctx.editMessageReplyMarkup({inline_keyboard:
            [
                [{text:"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω", callback_data:"userIsAdded"}],
            ]
        })
        await ctx.scene.leave();
    } else {
        await ctx.answerCbQuery()
        await ctx.scene.leave()
        await ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω')
    } 
})

const addNewEmpScene = new Scenes.WizardScene('addNewEmpScene', askFullName, askStatus, askPhone,askTgId, askPhoto, askComment, decision, final ) // askTgId 

module.exports = addNewEmpScene