const { Telegraf, Markup, Composer, Scenes } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);
const db = require('../db/db');
const constants = require('../constants');

/*–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π" –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏, —Ç–æ
–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏. –°—Ä–∞–∑—É –ø–æ–º–µ—â–∞–µ–º –≤ –Ω–µ–≥–æ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—ë–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–¥ –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏–∫ = –∞–π–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤ –±–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
–ï—Å–ª–∏ –≤ –±–¥ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –¥–∞–Ω–Ω—ã–º id - —Ç–æ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –µ–≥–æ –∏–∑ —Å—Ü–µ–Ω—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
–î–∞–ª—å—à–µ –¥–æ—Å—Ç–∞—ë–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏–∑ –±–¥ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫. —Ç–µ–∫—Å—Ç - —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∫–± - –µ–≥–æ –∞–π–¥–∏ –∏–∑ –±–¥
NEXT()
*/
const start = new Composer();
start.on('callback_query', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.data = {}
    ctx.session.data.user_id = ctx.update.callback_query.from.id
    db.all(constants.GET_EMPLOYEES_SQL, [], async (err, rows) => {
        if (err) console.log(err.message)
        if (rows.find(row => row.tg_id == ctx.session.data.user_id)) {
            let employee = rows.find(row => row.tg_id == ctx.session.data.user_id)
            ctx.session.data.user_id = employee.id
        } else {
            await ctx.reply(`–û—à–∏–±–∫–∞. –†–∞–±–æ—Ç–Ω–∏–∫–∞ —Å telegram id ${ctx.session.data.user_id} –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`)
            await ctx.scene.leave()
        }
    })
    
    db.all(constants.GET_CUSTOMER_SQL, [], async (err, rows) => {
        if (err) console.log(err.message)
        let customerBtns = rows.map(item => [Markup.button.callback(`${item.last_name} ${item.first_name}`, `${item.customer_id}`)])
        customerBtns.push([Markup.button.callback('üîô–ù–∞–∑–∞–¥', 'menu')])
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è', {reply_markup: {inline_keyboard: customerBtns }})
    })
    await ctx.wizard.next();
})


/*
 –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ–º–µ—â–∞–µ–º –≤ —Å–µ—Å—Å–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–∑ –±–¥: –§–ò, –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–π–¥–∏
 –ü–æ–º–µ—â–∞–µ–º –≤ –æ—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –∞–π–¥–∏ –¥–æ–ª–∂–Ω–∏–∫–∞ (–±–µ—Ä—ë–º –µ–≥–æ –∏–∑ –∫–æ–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞)
 –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–¥–µ–ª–∫–∏
 NEXT() 
 */
const productName = new Composer()
productName.on('callback_query', async (ctx) => {
    
    if (ctx.callbackQuery.data == 'menu') {
        await ctx.answerCbQuery()
        await ctx.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',constants.MAIN_MENU_BTNS )
        await ctx.scene.leave()
    } else {
        await ctx.answerCbQuery()
        // ctx.session.data.debtorId = +ctx.callbackQuery.data
        db.all(constants.GET_CUSTOMER_SQL, [], (err, rows) => {
            if (err) {
                console.log(err.message)
            } else {
                let customer = rows.find(row => row.customer_id == ctx.callbackQuery.data)
                ctx.session.data.customerFullName = customer.last_name + ' ' + customer.first_name
                ctx.session.data.address = customer.address
                ctx.session.data.phone = customer.phone
                ctx.session.data.customer_id = customer.customer_id
            }
        })
        let tappedButtonText = ctx.callbackQuery.message.reply_markup.inline_keyboard.find(item => item[0].callback_data == ctx.callbackQuery.data)[0].text;
        await ctx.editMessageReplyMarkup({ inline_keyboard: [[{text:`${tappedButtonText}`, callback_data:"_"}]] })
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', constants.LEAVE_WIZARD_BTN)
        await ctx.wizard.next()
    }
})

/* 
–ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–±—â - —ç—Ç–æ —Ç–µ–∫—Å—Ç –∏ –æ–Ω –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ
–∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ = –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ NEXT(), –∞ –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–±—â –æ–± –æ—à–∏–±–∫–µ 
*/
const cost = new Composer()
cost.on('message', async (ctx) => {
    if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É') {
        await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard(constants.MAIN_MENU_BTNS))
        await ctx.scene.leave()
    } else if (ctx.message.text.length > 3) {
        ctx.session.data.title = ctx.message.text
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ (–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)', constants.LEAVE_WIZARD_BTN)
        await ctx.wizard.next()
    } else {
        await ctx.reply('–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞!', constants.LEAVE_WIZARD_BTN)
    }
})

/* 
–ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–±—â - —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤ –Ω—ë–º –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ
–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–±—â –æ–± –æ—à–∏–±–∫–µ, –∞ –∏–Ω–∞—á–µ 
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–±—â –∏ –ø—Ä–∏–≤–æ–¥–∏–º –µ–≥–æ –∫ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é;
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ 18 –∫–Ω–æ–ø–æ–∫, –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å—Ä–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏. —Ç–µ–∫—Å—Ç - —ç–º–æ–¥–∂–∏, –∫–æ–ª–±—ç–∫ - —Ü–∏—Ñ—Ä–∞
    NEXT()
*/
const period = new Composer()
period.on('message', async (ctx) => {
    if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É') {
        await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard(constants.MAIN_MENU_BTNS))
        await ctx.scene.leave()
    } else if (!ctx.message.text || ctx.message.text.match(/\D/) || +ctx.message.text.length < 4) {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)!', constants.LEAVE_WIZARD_BTN)
    } else {
        ctx.session.data.cost = +ctx.message.text
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ (–º–µ—Å—è—Ü—ã)', constants.PERIOD_BUTTONS)
        await ctx.wizard.next()
    }
})

const margin = new Composer()
margin.on('callback_query', async (ctx) => {
    await ctx.answerCbQuery()
    if (ctx.callbackQuery.data == 'menu') {
        await ctx.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', constants.MAIN_MENU_BTNS)
        await ctx.scene.leave()
    } else {
        ctx.session.data.period = +ctx.callbackQuery.data
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', Markup.inlineKeyboard(constants.MARGIN_BUTTONS))
        await ctx.wizard.next()
    }
})

const guarantorStep = new Composer()
guarantorStep.on('callback_query', async (ctx) => {
    await ctx.answerCbQuery()
    if (ctx.callbackQuery.data == 'menu') {
        await ctx.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', constants.MAIN_MENU_BTNS )
        await ctx.scene.leave()
    } else {
        ctx.session.data.margin = +ctx.callbackQuery.data
        await ctx.reply(constants.ASK_GUARANTOR_TEXT, constants.LEAVE_WIZARD_BTN)
        await ctx.wizard.next()
    }
})

const photoStep = new Composer()
photoStep.on('message', async (ctx) => {
    if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É') {
        await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', constants.MAIN_MENU_BTNS)
        await ctx.scene.leave()
    } else {
        ctx.session.data.guarantorData = ctx.message.text
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º')
        await ctx.wizard.next()
    }
})

const checkInfoStep = new Composer()
checkInfoStep.on('message', async (ctx) => {    
    if (ctx.message.photo) {
        ctx.session.data.monthlyPay = (ctx.session.data.cost / 100 * (100 + ctx.session.data.margin) / ctx.session.data.period).toFixed(0)
        ctx.session.data.sum = ctx.session.data.cost / 100 * (100 + ctx.session.data.margin).toFixed(0)
        ctx.session.data.photo = ctx.message.photo[ctx.message.photo.length - 1].file_id
        await bot.telegram.sendPhoto(ctx.chat.id, `${ctx.session.data.photo}`, {caption: `
üë§
‚îî–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${ctx.session.data.customerFullName}
‚îî–ê–¥—Ä–µ—Å: ${ctx.session.data.address}
‚îî–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${ctx.session.data.phone}

<b><i>${ctx.session.data.title}</i></b>
    ‚îî–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${ctx.session.data.cost}</b>
    ‚îî–ü–µ—Ä–∏–æ–¥: <b>${ctx.session.data.period}</b>
    ‚îî–ù–∞—Ü–µ–Ω–∫–∞: <b>${ctx.session.data.margin}</b> 
    ‚îî–û–±—â–∞—è —Å—É–º–º–∞: <b>${ctx.session.data.sum}</b>
    ‚îîE–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: <b>${ctx.session.data.monthlyPay}</b>

–î–∞–Ω–Ω—ã–µ –ø–æ—Ä—É—á–∏—Ç–µ–ª—è(–µ–π): ${ctx.session.data.guarantorData}`,
parse_mode: 'HTML',
reply_markup: {inline_keyboard: constants.CHOICE_BUTTONS} })
await ctx.wizard.next()
    } else if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É') {
        await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', constants.MAIN_MENU_BTNS)
        await ctx.scene.leave()
    } else {
        await ctx.replyWithHTML('<b>–§–æ—Ç–æ</b> –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    }
})

const updateDb = new Composer()
updateDb.on('callback_query', async (ctx) => {
  await ctx.answerCbQuery()
  if (ctx.callbackQuery.data == 'applyDeal') {
    let insertData = [
      ctx.session.data.title,
      ctx.session.data.cost,
      ctx.session.data.sum,
      ctx.session.data.customer_id,
      ctx.session.data.period,
      ctx.session.data.monthlyPay,
      ctx.session.data.photo,
      ctx.session.data.user_id,
      0,
      ctx.session.data.guarantorData
    ]
    db.run(constants.ORDER_INSERT_SQL, insertData, async (err) => {
      if (err) console.log(err.message)
      await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([[Markup.button.callback('–°–¥–µ–ª–∫–∞ –∑–∞–∫–ª—é—á–µ–Ω–∞‚úÖ', '__')]]))
      await ctx.reply(`‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–∫–ª—é—á–µ–Ω–∞\n–û–ø–ª–∞—Ç–∞ —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞?`, constants.CHOOSE_START_MON_BTNS)
      await ctx.wizard.next();  
    })
  } else if (ctx.callbackQuery.data == 'cancelDeal') {
      await ctx.editMessageReplyMarkup({ inline_keyboard: [[{text: "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", callback_data: "dealConfirmed"}]] })
      await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', constants.MAIN_MENU_BTNS)
      await ctx.scene.leave()
    } else await ctx.answerCbQuery('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!')
})

const addPaymentsStep = new Composer();
addPaymentsStep.on('message', async (ctx) => {
  if (ctx.message.text == '‚è∫ –° —ç—Ç–æ–≥–æ') {
    db.get(constants.GET_ORDER_SQL, [ctx.session.data.title, ctx.session.data.monthlyPay], (err, row) => {
      if (err) console.log(err.message) 
      for (let i = 0; i < ctx.session.data.period; i++) {
          db.run(constants.INSERT_PAYMENTS_SQL, [row.id, ctx.session.data.monthlyPay, new Date(new Date().setMonth(new Date().getMonth() + i)).toISOString().slice(0, 10), 0], (err) => {
              err ? console.log(err.message) : console.log(this);
          })
      }
    })
    await ctx.replyWithHTML('<b>–ü–ª–∞—Ç–µ–∂–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.. </b>‚úÖ', constants.MAIN_MENU_BTNS)
    await ctx.scene.leave();
  } else if (ctx.message.text == '–°–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ ‚è≠') {
      db.get(constants.GET_ORDER_SQL, [ctx.session.data.title, ctx.session.data.monthlyPay], (err, row) => {
        if (err)  console.log(err.message) 
        for (let i = 1; i < ctx.session.data.period+1; i++) {
          db.run(constants.INSERT_PAYMENTS_SQL, [row.id, ctx.session.data.monthlyPay, new Date(new Date().setMonth(new Date().getMonth() + i)).toISOString().slice(0, 10), 0], (err) => {
              err ? console.log(err.message) : console.log(this);
          })
        }
      })
    await ctx.replyWithHTML('<b>–ü–ª–∞—Ç–µ–∂–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.. </b>‚úÖ', constants.MAIN_MENU_BTNS)
    await ctx.scene.leave();
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞ –ø–ª–∞—Ç–µ–∂–µ–π', constants.CHOOSE_START_MON_BTNS)
    }
})

const newDealOldDebtorScene = new Scenes.WizardScene('newDealOldDebtorScene', start, productName, cost, period, margin, guarantorStep, photoStep, checkInfoStep, updateDb, addPaymentsStep)
module.exports = newDealOldDebtorScene