const { Telegraf, Markup, Scenes, session} = require('telegraf');
require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN);
const db = require('./db/db')
const constants = require('./constants');

const catchErrs = async (ctx, next) => {
  try { 
    await next(); 
  } catch (err) {
      if (err.status === 400) console.log('Bad Request: The request was invalid or cannot be otherwise served.');
      else if (err.status === 401) console.log('Unauthorized: Authentication failed or user does not have permissions for the requested operation.');
      else if (err.status === 403) console.log('Forbidden: The request is valid, but the server is refusing to respond to it.');
      else if (err.status === 404) console.log('Not Found: The requested resource could not be found.');
      else if (err.status === 409) console.log('Conflict: The request could not be completed due to a conflict with the current state of the resource.');
      else if (err.status === 429) console.log('Too Many Requests: The user has sent too many requests in a given amount of time.');
      else if (err.status === 500) console.log('Internal Server Error: An unexpected condition was encountered by the server.');
      else console.log('An unexpected error has occurred.', err)
  }
}


const startBot = async (ctx) => {
  try {
    db.all(constants.GET_EMPLOYEES_SQL, async (err, rows) => {
      if (err) await ctx.reply(err.message)
      let employee = rows.find(employee => employee.tg_id == ctx.message.from.id)
      if (!employee) return ctx.reply('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º')
      await ctx.replyWithHTML(`–ê—Å—Å–∞–ª–∞–º—É 1–∞–ª–∞–π–∫—É–º! \n\n<b>–ò–º—è: ${employee.full_name}\n–°—Ç–∞—Ç—É—Å: ${employee.status}</b>`, 
      constants.MAIN_MENU_BTNS)
    })
  } catch (e) {
    console.log(e.message);
  }
} 

const showDealsList = async (ctx) => {
  try {
    await ctx.answerCbQuery()
    db.all(constants.GET_EMPLOYEES_SQL, [], async (err, rows) => {
      if (err) await ctx.reply(err.message)
      let userStatus = rows.find(employee => employee.tg_id == ctx.callbackQuery.from.id).status || '–ê–Ω–æ–Ω–∏–º'
      if (userStatus != 'üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' && userStatus != '‚úçÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü') {
        await ctx.answerCbQuery(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. \n–í–∞—à —Å—Ç–∞—Ç—É—Å: ${userStatus}`, {show_alert: true})
      } else {
        db.all(constants.GET_ALL_ORDERS_AND_PAYMENTS, [], async (err, rows) => {
          if (err) await ctx.reply(err.message)
          let buttons = rows.map((item) => {
            let today = new Date()
            let payday =  new Date(`${item.payment_date}`)
            let daysLeft = Math.ceil((payday.getTime() - today.getTime())/(1000 * 3600 * 24)+1)
            if (daysLeft < 4 && daysLeft > 0) return Markup.button.callback(`üü†${item.last_name} ${item.first_name[0]}.`, `order:${item.order_id}`)
            else if (daysLeft < 1 ) return Markup.button.callback(`üî¥${item.last_name} ${item.first_name[0]}.`, `order:${item.order_id}`)
            else return Markup.button.callback(`${item.last_name} ${item.first_name[0]}.`, `order:${item.order_id}`)
          }).filter((item, index, arr) => index === arr.findIndex(i =>  i.callback_data === item.callback_data));
          let newButtons = [];
          while (buttons.length) newButtons.push(buttons.splice(0, 2));
          newButtons.push([Markup.button.callback(`üîô–ù–∞–∑–∞–¥`, `menu`)])
          await ctx.editMessageText('–¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã', Markup.inlineKeyboard(newButtons))
        })
      }
    }) 
  } catch (e) {
    console.log(e.message);
  }
}



const getNet = (ctx) => {
  try {
    db.get(constants.GET_NET_PROFIT_SQL, [], async (err, row) => {
      if(err) await ctx.reply(err.message)
      await ctx.answerCbQuery(`–°—É–º–º–∞ –≤—Å–µ—Ö –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: \n${row.net_profit}‚ÇΩ` ?? '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç..', {show_alert: true})
    })
  } catch (e) {
    console.log(e.message);
  }
}

const getProfit = async (ctx) => {
 try {
  db.get(constants.GET_PROFIT_SQL, [], async (err, row) => {
    if(err) await ctx.reply(err.message)
    await ctx.answerCbQuery(`–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: \n${row.net_profit}‚ÇΩ \n` ?? '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç..', {show_alert: true})
  })
 } catch (e) {
  console.log(e.message)
 } 
}


const empSales = async (ctx) => {
  try {
    await ctx.answerCbQuery()
    db.all(constants.GET_EMPLOYEES_SALES_SQL, [], async (err, rows) => {
      if (err) await ctx.reply(err.message)
      let employeeData = rows.map(row => `\n\n<b>üë§ ${row.full_name}\nüìû ${row.phone} \n–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: ${row.sum}‚ÇΩ</b>`)
      await ctx.replyWithHTML(`${employeeData}` || '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç..')
    })
  } catch (e) {
    console.log(e.message);
  }
}


const getArchiveSalesInfo = async (ctx) => {
  try {
    await ctx.answerCbQuery()
    db.each(constants.GET_ALL_ORDERS, [], async (err, row) => {
        if(err) await ctx.reply(err.message)
        await ctx.replyWithHTML(`
–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${row.full_name}

–ò–º—è —Ç–æ–≤–∞—Ä–∞: ${row.title} 
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${row.cost}‚ÇΩ
–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: ${row.order_sum}‚ÇΩ

–ß–∏—Å—Ç—ã–º–∏: ${row.order_sum - row.cost}‚ÇΩ` || '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç..')

    })
  } catch (e) {
    console.log(e.message);
  }
}


const updateComment = async (ctx) => {
  try {
    await ctx.answerCbQuery()
    let [,currentOrder] = ctx.match
    ctx.session.data = {}
    ctx.session.data.currentOrder = currentOrder
    db.get(constants.GET_ORDER_INFO_SQL, [currentOrder], async (err, row) => {
      if (err) await ctx.reply(err.message)
      await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è ${row.title}`)
      await ctx.scene.enter('updateCommentScene')
    })
    await ctx.scene.enter('updateCommentScene')
  } catch (e) {
    console.log(e.message);
  }
}

const initNewDeal = async (ctx) => {
  try {
    db.all(constants.GET_EMPLOYEES_SQL, [], async (err, rows) => {
      if (err) console.log(err.message)
      let userStatus = rows.find(employee => employee.tg_id == ctx.callbackQuery.from.id).status || '–ê–Ω–æ–Ω–∏–º'
      if (userStatus != 'üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' && userStatus != '‚úçÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü') {
        await ctx.answerCbQuery(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. \n–í–∞—à —Å—Ç–∞—Ç—É—Å: ${userStatus}`, {show_alert: true})
      } else {
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')
        await ctx.editMessageReplyMarkup({inline_keyboard: constants.NEW_DEAL_BUTTONS})
      }
    })
  } catch (e) {
    console.log(e.message);
  }
}

const getCirculation = async (ctx) => {
  try {
    db.get(constants.GET_CIRCULAR_SQL, [], async (err, row) => {
      if(err) await ctx.reply(err.message)
      await ctx.answerCbQuery(`–°—É–º–º–∞ –≤ –æ–±–æ—Ä–æ—Ç–µ: ${row.circular}‚ÇΩ`, {show_alert: true})
    })
  } catch (e) {
    console.log(e.message);
  }
}

const showStats = async (ctx) => {
  try {
    await ctx.answerCbQuery()
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', Markup.inlineKeyboard(constants.STATS_BTNS))
  } catch (e) {
    console.log(e.message);
  }
} 

const deleteEmp = async (ctx) => {
  try {
    db.all(constants.GET_EMPLOYEES_SQL, [], async (err, rows) => {
      if (err) console.log(err.message);
      let userStatus = rows.find(employee => employee.tg_id == ctx.callbackQuery.from.id).status || '–ê–Ω–æ–Ω–∏–º'
      if (userStatus != 'üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
          await ctx.answerCbQuery(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. \n–í–∞—à —Å—Ç–∞—Ç—É—Å: ${userStatus}`, {show_alert: true})
      } else {
        let [,,employee] = ctx.match
        await ctx.editMessageReplyMarkup({inline_keyboard:[[{text:"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω", callback_data:"userIsDeleted"}]] })
        let sql = `DELETE FROM employees WHERE id = (?)`
        db.run(sql,[employee], async (err) => {
          if (err) console.log(err.message)
          await ctx.reply('—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—ã–ª —É–¥–∞–ª—ë–Ω..') 
        })
      }
    })
  } catch (e) {
    console.log(e.message);
  }
}

const showEmployees = async (ctx) => {
  try {
    db.all(constants.GET_EMPLOYEES_SQL, [], async (err, rows) => {
      if(err) console.log(err.message)
      let employeeBtns = rows.map(item => [Markup.button.callback(`${item.full_name}`, `employee:${item.id}`)])
      employeeBtns.push([Markup.button.callback(`üîô–ù–∞–∑–∞–¥`, `menu`), Markup.button.callback(`‚ûï–î–æ–±–∞–≤–∏—Ç—å`, `addNewEmployee`)])
      await ctx.answerCbQuery()
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
      await ctx.editMessageReplyMarkup({inline_keyboard: employeeBtns})
    })
  } catch (e) {
    console.log(e.message);
  }
}

const showEmployee = async (ctx) => {
  try {
    await ctx.deleteMessage()
    let sql = `SELECT * FROM employees`
    db.all(sql, [], async (err, rows) => {
      if(err)console.log(err.message)
      await ctx.answerCbQuery()
      let [,matchedEmp] = ctx.match
      let employee = rows.find(row => row.id == matchedEmp)
      await ctx.telegram.sendPhoto(ctx.chat.id, `${employee.photo}`, {
        caption: `
  –ò–º—è: ${employee.full_name}
  –°—Ç–∞—Ç—É—Å: ${employee.status}
  –õ–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä: ${employee.phone}
  ‚úâÔ∏è<a href="tg://user?id=${employee.tg_id}">–ù–∞–ø–∏—Å–∞—Ç—å</a>` ,
        reply_markup: {
          inline_keyboard: [
            [{text: '–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data: `deleteEmp:${employee.id}`}],
            [{text: 'üîô–ù–∞–∑–∞–¥', callback_data: `menu`}],
          ]
        }, parse_mode: 'HTML'
      })
    })
  } catch (e) {
    console.log(e.message);
  }
}

const showDealData = async (ctx, currentOrder) => {
  try {
    db.all(constants.GET_ORDER_INFO_SQL, [currentOrder], (err, rows) => {
      if (err) console.log(err.message)
      let orderPhoto = rows[0].photo_id
      let customerFullName = rows[0].last_name + ' ' + rows[0].first_name
      let customerPhone = rows[0].phone
      let customerAddress = rows[0].address
      let productName = rows[0].title
      let cost = rows[0].cost
      let sum = rows[0].order_sum
      let extraCharge = sum-cost
      let guarantor_info = rows[0].guarantor_info
      let comment = rows[0].order_comment
  
      let payments = rows.map(item => {
        let today = new Date()
        let payday =  new Date(`${item.payment_date}`)
        let daysLeft = Math.ceil((payday.getTime() - today.getTime())/(1000 * 3600 * 24)+1)
        if (item.is_paid == 1) return `\n üü¢ ${item.payment_date.split('-').reverse().join('-')} ${item.payment_sum} ‚ÇΩ`
        else if (daysLeft < 4 && daysLeft > 0) return `\n üü† ${item.payment_date.split('-').reverse().join('-')} ${item.payment_sum} ‚ÇΩ`
        else if (daysLeft > 4) return `\n ‚ö™Ô∏è ${item.payment_date.split('-').reverse().join('-')} ${item.payment_sum} ‚ÇΩ`
        else if ( daysLeft < 1) return `\n üî¥ ${item.payment_date.split('-').reverse().join('-')} ${item.payment_sum} ‚ÇΩ`
      })
      bot.telegram.sendPhoto(ctx.chat.id,`${orderPhoto}`, 
      {caption: 
  `üë§
  ‚îî ${customerFullName}
  ‚îî ${customerPhone}
  ‚îî ${customerAddress}
  
  <i>${productName}</i>
    ‚îî–°—Ç–æ–∏–º–æ—Å—Ç—å ${cost} ‚ÇΩ
    ‚îî–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ ${extraCharge} ‚ÇΩ
    ‚îî–í—Å–µ–≥–æ ${sum} ‚ÇΩ
  
  –ü–ª–∞—Ç–µ–∂–∏: ${payments.sort((a, b) => a - b)} 
  
  –ü–æ—Ä—É—á–∏—Ç–µ–ª—å: ${guarantor_info}
  
  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`, parse_mode: 'HTML', reply_markup:{inline_keyboard: [
        [{text:'–û–ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—Ü', callback_data: `payAMonth:${currentOrder}`}],
        [{text:'–í–Ω–µ—Å—Ç–∏ —Å—É–º–º—É', callback_data: `insertPayment:${currentOrder}`}],
        [{text:'–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: `updateComment:${currentOrder}`}],
        [{text:'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: `showCustomer:${currentOrder}`}],
        [{text:'üîô–ù–∞–∑–∞–¥', callback_data: 'menu'}],
        ]}
      })
    })
  } catch (e) {
    console.log(e.message);
  }
}


const payAMonth = async (ctx) => {
  try {
    await ctx.answerCbQuery()
    let [,currentOrder] = ctx.match
    db.all(constants.GET_UNPAID_PAYMENTS_SQL, [currentOrder], async (err, rows) => {
      if (err) console.log(err.message)
      console.log(rows)
      console.log(rows.length)
      if (rows.length > 1) {
        db.run(constants.UPDATE_PAYMENTS_SQL, [rows[0].payment_id], (err) => {
          if (err) console.log(err)
          console.log('–ü–ª–∞—Ç–µ–∂ –æ–±–Ω–æ–≤–ª—ë–Ω')
        })
        db.all(constants.GET_ORDER_INFO_SQL, [currentOrder], async (err, rows) => {
          if (err) console.log(err.message)
          let customerFullName = rows[0].last_name + ' ' + rows[0].first_name
          let customerPhone = rows[0].phone
          let customerAddress = rows[0].address
          let productName = rows[0].title
          let cost = rows[0].cost
          let sum = rows[0].order_sum
          let extraCharge = sum-cost
          let guarantor_info = rows[0].guarantor_info
          let comment = rows[0].order_comment
          let payments = rows.map(item => {
          let today = new Date()
          let payday =  new Date(`${item.payment_date}`)
          let daysLeft = Math.ceil((payday.getTime() - today.getTime())/(1000 * 3600 * 24)+1)
          if (item.is_paid == 1) return `\nüü¢ ${item.payment_date.split('-').reverse().join('-')} ${item.payment_sum} ‚ÇΩ`
          else if (daysLeft < 4 && daysLeft > 0) return `\nüü† ${item.payment_date.split('-').reverse().join('-')} ${item.payment_sum} ‚ÇΩ`
          else if (daysLeft > 4) return `\n‚ö™Ô∏è ${item.payment_date.split('-').reverse().join('-')} ${item.payment_sum} ‚ÇΩ`
          else if ( daysLeft < 1) return `\nüî¥ ${item.payment_date.split('-').reverse().join('-')} ${item.payment_sum} ‚ÇΩ`  
          })
          console.log(payments);
          await ctx.editMessageCaption(
          {caption: 
  `üë§
  ‚îî ${customerFullName}
  ‚îî ${customerPhone}
  ‚îî ${customerAddress}
        
  <i>${productName}</i>
    ‚îî–°—Ç–æ–∏–º–æ—Å—Ç—å ${cost} ‚ÇΩ
    ‚îî–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ ${extraCharge} ‚ÇΩ
    ‚îî–í—Å–µ–≥–æ ${sum} ‚ÇΩ
    
  –ü–ª–∞—Ç–µ–∂–∏: ${payments.sort((a, b) => a - b)}
    
  –ü–æ—Ä—É—á–∏—Ç–µ–ª—å: ${guarantor_info}
  
  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`, parse_mode: 'HTML', reply_markup: {inline_keyboard: [
            [{text:'–û–ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—Ü', callback_data: `payAMonth:${currentOrder}`}],
            [{text:'–í–Ω–µ—Å—Ç–∏ —Å—É–º–º—É', callback_data: `insertPayment:${currentOrder}`}],
            [{text:'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: `showCustomer:${currentOrder}`}],
            [{text:'–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: `updateComment:${currentOrder}`}],
            [{text:'–ù–∞–∑–∞–¥', callback_data: 'menu'}],
            ]}
          })
        })
      } else {
          console.log(ctx.update)
          db.serialize(() => {
            db.run(constants.UPDATE_ORDER_IS_PAYED_SQL, [currentOrder], async (err, rows)=> {
              if (err) await ctx.reply(err.message)
              await ctx.reply('–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ')
            })
            db.run(constants.UPDATE_PAYMENTS_SQL, [rows[0].payment_id], (err) => {
              if (err) console.log(err)
              console.log('–ü–ª–∞—Ç–µ–∂ –æ–±–Ω–æ–≤–ª—ë–Ω')
            })
            db.all(constants.GET_ORDER_INFO_SQL, [currentOrder], async (err, rows) => {
            if (err) console.log(err.message)
            let customerFullName = rows[0].last_name + ' ' + rows[0].first_name
            let customerPhone = rows[0].phone
            let customerAddress = rows[0].address
            let productName = rows[0].title
            let cost = rows[0].cost
            let sum = rows[0].order_sum
            let extraCharge = sum-cost
            let guarantor_info = rows[0].guarantor_info
            let comment = rows[0].order_comment
  
            let payments = rows.map(item => item.is_paid == 0? `\n ‚ö™Ô∏è${item.payment_date} ${item.payment_sum} ‚ÇΩ` : `\nüü¢ ${item.payment_date} ${item.payment_sum} ‚ÇΩ`)
            console.log(payments);
            await ctx.editMessageCaption(
              {caption: 
  `üë§
  ‚îî ${customerFullName}
  ‚îî ${customerPhone}
  ‚îî ${customerAddress}
        
  <i>${productName}</i>
    ‚îî–°—Ç–æ–∏–º–æ—Å—Ç—å ${cost}
    ‚îî–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ ${extraCharge}
    ‚îî–í—Å–µ–≥–æ ${sum}
    
  –ü–ª–∞—Ç–µ–∂–∏: ${payments.sort((a, b) => a - b)}
    
  –ü–æ—Ä—É—á–∏—Ç–µ–ª—å: ${guarantor_info}
  
  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`,
  parse_mode: 'HTML', reply_markup: {inline_keyboard: [[{text:'üîô–ù–∞–∑–∞–¥', callback_data: 'menu'}],]}
            })
          })
        })
      }
    })
  } catch (e) {
    console.log(e.message);
  }
}


const showMenu = async (ctx) => {
  try {
    await ctx.answerCbQuery()
    await ctx.deleteMessage();
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', constants.MAIN_MENU_BTNS)
  } catch (e) {
    console.log(e.message);
  }
}

const showCustomer = async (ctx) => {
  db.get(constants.GET_CUSTOMER_INFO, ctx.match[1], async (err, row) => {
    if (err) console.log(err.message);
    ctx.telegram.sendPhoto(ctx.chat.id, row.customer_photo, {caption: 
`üë§ ${row.last_name} ${row.first_name}
üìû ${row.phone}
üìç ${row.address}

üìù ${row.comment}`, 
reply_markup:{inline_keyboard:[ [{text:"–ù–∞–∑–∞–¥", callback_data:`order:${row.id}`}] ]}
    })
    console.log(row.id);
  })
}


module.exports = {
  getNet, 
  empSales, 
  getArchiveSalesInfo, 
  updateComment, 
  initNewDeal, 
  getCirculation, 
  showStats,
  deleteEmp,
  showEmployees,
  showEmployee,
  showDealsList,
  startBot,
  showDealData,
  payAMonth,
  showMenu,
  catchErrs,
  getProfit,
  showCustomer
}